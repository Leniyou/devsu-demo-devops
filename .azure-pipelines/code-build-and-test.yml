---
parameters:
  - name: repositoryName
    type: string
  - name: sonarqubeServiceName
    type: string
  - name: sonarToken
    type: string
  - name: nodeVersion
    type: string
    default: '$(nodeVersion)'

steps:

  # -- Code Build / Instalación de dependencias -- #
  - task: NodeTool@0
    displayName: "Instalar Node.js ${{ parameters.nodeVersion }}"
    inputs:
      versionSpec: '${{ parameters.nodeVersion }}'

  - pwsh: |
      Write-Host "Instalando dependencias de Node.js"
      npm install
    displayName: "Instalar dependencias de Node.js"

  # -- Unit Tests / Pruebas Unitarias-- #
  - pwsh: |
      Write-Host "Ejecutando pruebas unitarias"
      npm run test:ci
    displayName: "Ejecutar pruebas unitarias"
    continueOnError: true

  - task: PublishTestResults@2
    displayName: "Publicar resultados de pruebas unitarias"
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'junit.xml'
      searchFolder: "$(System.DefaultWorkingDirectory)/test-results"

  # -- ESLint static code analysis / Análisis Estático de código con ESLint -- #
  - pwsh: |
      Write-Host "Ejecutando análisis de código estático con ESLint"
      npx eslint . --ext .js
    displayName: "Ejecutar análisis de código estático con ESLint"
    continueOnError: true

  # -- SonarQube static code analysis / Análisis de código con SonarQube  -- #
  - task: SonarQubePrepare@7
    displayName: "Preparar análisis de SonarQube"
    inputs:
      SonarQube: '${{ parameters.sonarqubeServiceName }}'
      scannerMode: 'cli'
      configMode: 'file'
      cliProjectKey: '${{ parameters.repositoryName }}'
      cliProjectName: '${{ parameters.repositoryName }}'
      cliSources: 'src'
      extraProperties: |
        sonar.token=${{ parameters.sonarToken }}
    
  - pwsh: |
      Write-Host "ls"
      ls $(System.DefaultWorkingDirectory)/test-results/*

  - task: SonarQubeAnalyze@7
    displayName: "Analizar código con SonarQube"
    inputs:
      jdkversion: 'JAVA_HOME'

  - task: SonarQubePublish@7
    displayName: "Publicar resultados de SonarQube"
    inputs:
      pollingTimeoutSec: '300'

  # -- Publish Code Coverage / Publicar resultados de cobertura de código -- #
  - task: PublishCodeCoverageResults@2
    displayName: "Publicar resultados de cobertura de código"
    inputs:
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/test-results/coverage/cobertura-coverage.xml'
