trigger:
  branches:
    include:
      - main

pool:
  name: 'devsu-demo' # <-- Agente Auto-Hospedado

variables:
  - template: .azure-pipelines/variables.yml
  - group: global-secrets

stages:
  - stage: BuildAndTest
    displayName: Compilación y Pruebas de Código
    jobs:
      - job: BuildAndTestCode
        steps:
          - template: .azure-pipelines/build-and-test-code.yml
            parameters:
              repositoryName: '$(Build.Repository.Name)'
              sonarqubeServiceName: '$(sonarqubeServiceName)'
              sonarToken: '$(sonarToken)'

  - stage: DevSecOps
    displayName: Análisis de Vulnerabilidades
    dependsOn: [BuildAndTest]
    jobs:
      - job: VulnerabilityScan
        steps:
          - template: .azure-pipelines/vulnerability-scan.yml
            parameters:
              repositoryName: '$(Build.Repository.Name)'
              snykServiceName: '$(snykServiceName)'

  - stage: Versioning
    displayName: Versionamiento del Proyecto
    dependsOn: [BuildAndTest]
    jobs:
      - job: GitVersion
        displayName: Versionar Proyecto
        steps:
          - template: .azure-pipelines/git-version.yml

  - stage: Dockerize
    displayName: Construir y subir Imagen Docker
    dependsOn: [DevSecOps, Versioning]
    jobs:
      - job: BuildAndPushDocker
        displayName: Construir y subir la imagen Docker
        variables:
          dockerTagAlpha: $[stageDependencies.Versioning.GitVersion.outputs['SetTags.dockerTagAlpha']]
          dockerTagBeta: $[stageDependencies.Versioning.GitVersion.outputs['SetTags.dockerTagBeta']]
          dockerTagProd: $[stageDependencies.Versioning.GitVersion.outputs['SetTags.dockerTagProd']]
          dockerTagFinal: $[stageDependencies.Versioning.GitVersion.outputs['SetTags.dockerTagFinal']]
        steps:
          - template: .azure-pipelines/build-and-push-docker.yml
            parameters:
              dockerRepositoryName: '$(dockerRepositoryName)'
              dockerContainerRegistry: '$(dockerContainerRegistry)'

  - stage: DeployToDev
    displayName: "Desplegar a DEV"
    dependsOn: [Versioning, Dockerize]
    jobs:
      - job: DeployToK8sDev
        condition: always()
        variables:
          envName: 'dev'
          dockerTag: $[ stageDependencies.Versioning.GitVersion.outputs['SetTags.dockerTagAlpha'] ]
        steps:
          - template: .azure-pipelines/deploy-to-k8s.yml

  - stage: DeployToQA
    displayName: "Desplegar a QA"
    dependsOn: [Versioning, DeployToDev]
    jobs:
    - deployment: DeployToK8sQA
      condition: succeeded()
      environment: 'qa'
      variables:
        envName: 'qa'
        dockerTag: $[ stageDependencies.Versioning.GitVersion.outputs['SetTags.dockerTagBeta'] ]
      strategy:
        runOnce:
          deploy:
            steps:
              - template: .azure-pipelines/deploy-to-k8s.yml

  - stage: DeployToProd
    displayName: "Desplegar a PROD"
    dependsOn: [Versioning, DeployToQA]
    jobs:
      - deployment: DeployToK8sProd
        condition: succeeded()
        environment: 'prod'
        variables:
          envName: 'prod'
          dockerTag: $[ stageDependencies.Versioning.GitVersion.outputs['SetTags.dockerTagProd'] ]
        strategy:
          runOnce:
            deploy:
              steps:
                - template: .azure-pipelines/deploy-to-k8s.yml
